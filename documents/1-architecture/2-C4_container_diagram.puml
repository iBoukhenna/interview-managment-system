@startuml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
' uncomment the following line and comment the first to use locally
' !include C4_Container.puml

' LAYOUT_TOP_DOWN()
' LAYOUT_AS_SKETCH()
LAYOUT_WITH_LEGEND()

title Container diagram for Interview Management System

Person(recruiter, "Recruiter")
Person(technical_advisor, "Technical Advisor")

System_Boundary(c1, "Interview Management System") {

    Container(reverse_proxy, "Reverse Proxy", "NGINX", "Delivers the static content and the interview single page application.")

    Container(spa, "Single Page Application", "JavaScript, Angular", "Provides all the interview system functionality to recruiter and technical advisor via their web browser.")

    Container(mobile_app, "Mobile App", "C#, Xamarin", "Provides a limited subset of interview system functionality to recruiter and technical advisor via their mobile device.")

    Container(backend_api_interview, "Microservice Interview", "Java and Spring boot", "Provides fonctionality via JSON/HTTPS API.")
    ContainerDb(database_interview, "Database Interview", "Relational Database Schema", "Stores All Data.")

    Container(backend_api_interview_request, "Microservice Interview Request", "Java and Spring boot", "Provides fonctionality via JSON/HTTPS API.")
    ContainerDb(database_interview_request, "Database Interview Request", "Relational Database Schema", "Stores All Data.")

    Container(backend_api_recruiter, "Microservice Recruiter", "Java and Spring boot", "Provides fonctionality via JSON/HTTPS API.")
    ContainerDb(database_recruiter, "Database Recruiter", "Relational Database Schema", "Stores All Data.")

    Container(backend_api_technical_advisor, "Microservice Technical Advisor", "Java and Spring boot", "Provides fonctionality via JSON/HTTPS API.")
    ContainerDb(database_technical_advisor, "Database Technical Advisor", "Relational Database Schema", "Stores All Data.")

    Container(backend_api_notification, "Microservice Notification", "Java and Spring boot", "Provides fonctionality via JSON/HTTPS API.")

    Container(message_queue, "Messaging Service", "Kafka", "Publication of message event.")
}

System_Ext(email_system, "E-Mail System")
System_Ext(unit4_system, "Unit4 System")

Rel(recruiter, reverse_proxy, "Uses", "HTTPS")
Rel(technical_advisor, reverse_proxy, "Uses", "HTTPS")

Rel(recruiter, mobile_app, "Uses")
Rel(technical_advisor, mobile_app, "Uses")

Rel(reverse_proxy, spa, "Delivers")

Rel(spa, backend_api_interview, "Uses", "JSON/HTTPS")
Rel(mobile_app, backend_api_interview, "Uses", "JSON/HTTPS")

Rel(spa, backend_api_interview_request, "Uses", "JSON/HTTPS")
Rel(mobile_app, backend_api_interview_request, "Uses", "JSON/HTTPS")

Rel(spa, backend_api_recruiter, "Uses", "JSON/HTTPS")
Rel(mobile_app, backend_api_recruiter, "Uses", "JSON/HTTPS")

Rel(spa, backend_api_technical_advisor, "Uses", "JSON/HTTPS")
Rel(mobile_app, backend_api_technical_advisor, "Uses", "JSON/HTTPS")

Rel_Neighbor(backend_api_interview_request, backend_api_interview, "Uses", "JSON/HTTPS")
Rel_Neighbor(backend_api_interview_request, backend_api_technical_advisor, "Uses", "JSON/HTTPS")
Rel_Neighbor(backend_api_notification, backend_api_recruiter, "Uses", "JSON/HTTPS")
Rel_Neighbor(backend_api_notification, backend_api_technical_advisor, "Uses", "JSON/HTTPS")

Rel(backend_api_interview, database_interview, "Read and Write", "JDBC")
Rel(backend_api_interview_request, database_interview_request, "Read and Write", "JDBC")
Rel(backend_api_technical_advisor, database_technical_advisor, "Read and Write", "JDBC")
Rel(backend_api_recruiter, database_recruiter, "Read and Write", "JDBC")

Rel(backend_api_interview, message_queue, "Publish and Consume Message")
Rel(backend_api_interview_request, message_queue, "Publish and Consume Message")
Rel(backend_api_notification, message_queue, "Consume Message")


Rel_Back(recruiter, email_system, "Uses", "Send Email")
Rel_Back(technical_advisor, email_system, "Uses", "Send Email")

Rel_Back(email_system, backend_api_notification, "Uses", "Send Email")
Rel_Neighbor(backend_api_interview, unit4_system, "Uses")


@enduml